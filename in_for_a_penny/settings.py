"""
Django settings for in_for_a_penny project.

Generated by 'django-admin startproject' using Django 4.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

import os
from pathlib import Path

import environ
from django.contrib.messages import constants as messages

from .constants import (
    BASE_APP_NAME, LOGIN_URL as USER_LOGIN_URL, MIN_PASSWORD_LEN,
    BUDGET_APP_NAME
)

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
# name of main app
MAIN_APP = Path(__file__).resolve().parent.name

# required environment variables are keys of 'scheme' plus REQUIRED_ENV_VARS
scheme = {
    # set casting, default value
    'DEBUG': (bool, False),
    'DEVELOPMENT': (bool, False),
    'TEST': (bool, False),
}
REQUIRED_ENV_VARS = [key for key, _ in scheme.items()]
REQUIRED_ENV_VARS.extend(['SITE_ID', 'SECRET_KEY', 'DATABASE_URL'])

env = environ.Env(**scheme)
# Take environment variables from .env file
os.environ.setdefault('ENV_FILE', '.env')
environ.Env.read_env(
    os.path.join(BASE_DIR, env('ENV_FILE'))
)

# required for running tailwind css
#NPM_BIN_PATH = env('LOCAL_NPM_BIN_PATH')

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env('DEBUG')
DEVELOPMENT = env('DEVELOPMENT')
TEST = env('TEST')

if DEVELOPMENT:
    ALLOWED_HOSTS = ['testserver'] \
        if env('TEST') else ['localhost', '127.0.0.1', '.gitpod.io']
else:
    ALLOWED_HOSTS = env.list('HEROKU_HOSTNAME', default=[])
    # Add Render.com URL to allowed hosts
    RENDER_EXTERNAL_HOSTNAME = env('RENDER_EXTERNAL_HOSTNAME', default=None)
    if RENDER_EXTERNAL_HOSTNAME:
        ALLOWED_HOSTS.append(RENDER_EXTERNAL_HOSTNAME)

# Application definition

# Set to 'cloudinary' or 's3' or cloud storage
STORAGE_PROVIDER = 'default' if DEVELOPMENT else \
    env('STORAGE_PROVIDER', default='default').lower()
PROVIDERS = {
    'default': 'django.contrib.staticfiles.storage.StaticFilesStorage',
    'cloudinary': 'cloudinary_storage.storage.StaticHashedCloudinaryStorage',
    's3': 'in_for_a_penny.s3_storage.StaticStorage'
}
DEFAULT_STORAGE = {
    'default': 'django.core.files.storage.FileSystemStorage',
    'cloudinary': 'cloudinary_storage.storage.MediaCloudinaryStorage',
    's3': 'in_for_a_penny.s3_storage.PublicMediaStorage'
}

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.humanize',

    # The following apps are required by 'allauth':
    #   django.contrib.auth, django.contrib.messages
    'django.contrib.sites',
    # 'allauth',
    # 'allauth.account',
    # 'allauth.socialaccount',
]
if STORAGE_PROVIDER == 'cloudinary':
    # cloudinary-related storage apps
    INSTALLED_APPS.extend([
        # https://pypi.org/project/dj3-cloudinary-storage/
        # If using for static and/or media files, make sure that cloudinary_storage
        # is before django.contrib.staticfiles
        'cloudinary_storage',
        'django.contrib.staticfiles',
        'cloudinary',
    ])
elif STORAGE_PROVIDER == 's3':
    # s3-related storage apps
    INSTALLED_APPS.extend([
        'django.contrib.staticfiles',
        'storages',
    ])
else:
    # default storage apps
    INSTALLED_APPS.extend([
        'django.contrib.staticfiles',
    ])

INSTALLED_APPS.extend([
    # 'tailwind',
    # 'theme',
    # 'django_browser_reload',

    'django_countries',

    BASE_APP_NAME,
    BUDGET_APP_NAME,

    # needs to be after app with django template overrides
    'django.forms',
])

#TAILWIND_APP_NAME = 'theme'

# To supply custom templates to django widgets:
# 1) Add 'django.forms' to INSTALLED_APPS; *after* the app with the overrides.
# 2) Add FORM_RENDERER = 'django.forms.renderers.TemplatesSetting' to
#    settings.py.
# Courtesy of https://stackoverflow.com/a/52184422/4054609
# https://docs.djangoproject.com/en/4.1/ref/forms/renderers/#django.forms.renderers.TemplatesSetting
FORM_RENDERER = 'django.forms.renderers.TemplatesSetting'

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    # "django_browser_reload.middleware.BrowserReloadMiddleware",
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# https://docs.djangoproject.com/en/4.1/ref/settings/#root-urlconf
ROOT_URLCONF = f'{MAIN_APP}.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',

                # `allauth` needs this from django
                'django.template.context_processors.request',

                # app-specific context processors
                f'{BASE_APP_NAME}.context_processors.base_context',
            ],
        },
    },
]

WSGI_APPLICATION = f'{MAIN_APP}.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASES = {
    # read os.environ['DATABASE_URL'] and raises
    # ImproperlyConfigured exception if not found
    #
    # The db() method is an alias for db_url().
    'default': env.db(),

    # read os.environ['REMOTE_DATABASE_URL']
    'remote': env.db_url(
        'REMOTE_DATABASE_URL',
        default=f'sqlite:///{os.path.join(BASE_DIR, "temp-remote.sqlite3")}'
    ),

    # read os.environ['SQLITE_URL']
    'extra': env.db_url(
        'SQLITE_URL',
        default=f'sqlite:///{os.path.join(BASE_DIR, "temp-sqlite.sqlite3")}'
    )
}

# 'allauth' site id
SITE_ID = int(env('SITE_ID'))

# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.'
                'UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.'
                'MinimumLengthValidator',
        'OPTIONS': {
            'min_length': MIN_PASSWORD_LEN,
        }
    },
    {
        'NAME': 'django.contrib.auth.password_validation.'
                'CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.'
                'NumericPasswordValidator',
    },
]

# https://docs.djangoproject.com/en/4.1/ref/settings/#login-url
LOGIN_URL = USER_LOGIN_URL
# https://docs.djangoproject.com/en/4.1/ref/settings/#login-redirect-url
LOGIN_REDIRECT_URL = '/'
# https://docs.djangoproject.com/en/4.1/ref/settings/#logout-redirect-url
LOGOUT_REDIRECT_URL = '/'

# https://docs.djangoproject.com/en/4.1/ref/settings/#std-setting-MESSAGE_TAGS
MESSAGE_TAGS = {
    messages.DEBUG: 'alert-info',
    messages.INFO: 'alert-info',
    messages.SUCCESS: 'alert-success',
    messages.WARNING: 'alert-warning',
    messages.ERROR: 'alert-danger',
}

# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

# !!
# https://github.com/klis87/django-cloudinary-storage
# Please note that you must set DEBUG to False to fetch static files from
# Cloudinary.
# With DEBUG equal to True, Django staticfiles app will use your local files
# for easier and faster development
# (unless you use cloudinary_static template tag).
# !!

if STORAGE_PROVIDER == 's3':
    # s3-related settings
    # https://django-storages.readthedocs.io/en/latest/backends/amazon-S3.html
    # aws settings
    AWS_ACCESS_KEY_ID = env('AWS_ACCESS_KEY_ID')
    AWS_SECRET_ACCESS_KEY = env('AWS_SECRET_ACCESS_KEY')
    AWS_STORAGE_BUCKET_NAME = env('AWS_STORAGE_BUCKET_NAME')
    # ACL default is None which means the file will be private per Amazon’s
    # default
    AWS_DEFAULT_ACL = None
    AWS_S3_CUSTOM_DOMAIN = f'{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com'
    AWS_S3_OBJECT_PARAMETERS = {'CacheControl': 'max-age=86400'}
    # s3 static settings
    AWS_LOCATION = 'static'
    STATIC_URL = f'https://{AWS_S3_CUSTOM_DOMAIN}/{AWS_LOCATION}/'
    # s3 public media settings
    PUBLIC_MEDIA_LOCATION = 'media'
    MEDIA_URL = f'https://{AWS_S3_CUSTOM_DOMAIN}/{PUBLIC_MEDIA_LOCATION}/'
else:
    # URL to use when referring to static files located in STATIC_ROOT
    STATIC_URL = 'static/'
    MEDIA_URL = 'media/'

# https://docs.djangoproject.com/en/4.1/ref/settings/#staticfiles-storage
STATICFILES_STORAGE = PROVIDERS[STORAGE_PROVIDER]
# https://docs.djangoproject.com/en/4.1/ref/settings/#std-setting-STATICFILES_DIRS
# Additional locations the staticfiles app will traverse for collectstatic
STATICFILES_DIRS = [
    # directories that will be found by staticfiles’s finders are by default,
    # are 'static/' app sub-directories and any directories included in
    # STATICFILES_DIRS
    os.path.join(BASE_DIR, 'static')
]
# absolute path to the directory where static files are collected for
# deployment
# https://docs.djangoproject.com/en/4.1/ref/settings/#std-setting-STATIC_ROOT
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# https://docs.djangoproject.com/en/4.1/ref/settings/#std-setting-MEDIA_ROOT
MEDIA_ROOT = os.path.join(BASE_DIR, MEDIA_URL)

# https://docs.djangoproject.com/en/4.1/ref/settings/#default-file-storage
DEFAULT_FILE_STORAGE = DEFAULT_STORAGE[STORAGE_PROVIDER]

# fixtures
FIXTURE_DIRS = [
    os.path.join(BASE_DIR, 'data', 'fixtures')
]

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


INTERNAL_IPS = [
    "127.0.0.1",
]
